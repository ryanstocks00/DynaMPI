---
name: Linux Clang
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
env:
  CMAKE_CXX_STANDARD: 20
  CMAKE_VERBOSE_MAKEFILE: ON
jobs:
  linux-clang:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        clang-version: [14, 15, 16, 17, 18]
        build-type: [Debug, Release]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Clang ${{ matrix.clang-version }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang-${{ matrix.clang-version }} \
            libc++-${{ matrix.clang-version }}-dev \
            libc++abi-${{ matrix.clang-version }}-dev
      - name: Install MPI (OpenMPI, MPICH, IntelMPI)
        run: |
          case "${{ matrix.clang-version }}" in
            14|15)
              sudo apt-get install -y libopenmpi-dev openmpi-bin
              echo "MPI_TYPE=OpenMPI" >> $GITHUB_ENV
              ;;
            16|17)
              sudo apt-get install -y libmpich-dev mpich
              echo "MPI_TYPE=MPICH" >> $GITHUB_ENV
              ;;
            18)
              wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \
                | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
              echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] \
                https://apt.repos.intel.com/oneapi all main" \
                | sudo tee /etc/apt/sources.list.d/oneAPI.list
              sudo apt-get update
              sudo apt-get install -y intel-oneapi-mpi-devel
              echo "MPI_TYPE=IntelMPI" >> $GITHUB_ENV
              ;;
          esac
      - name: Configure CMake
        run: |
          export CC=clang-${{ matrix.clang-version }}
          export CXX=clang++-${{ matrix.clang-version }}

          case "${{ matrix.clang-version }}" in
            18)
              source /opt/intel/oneapi/setvars.sh
              export I_MPI_CC=$CC
              export I_MPI_CXX=$CXX
              ;;
            16|17)
              # MPICH needs explicit compiler overrides
              export MPICH_CC=$CC
              export MPICH_CXX=$CXX
              ;;
          esac

          CMAKE_ARGS=(
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
            -DCMAKE_C_COMPILER=$CC
            -DCMAKE_CXX_COMPILER=$CXX
            -DMPI_C_COMPILER=$CC
            -DMPI_CXX_COMPILER=$CXX
            -DDYNAMPI_BUILD_TESTS=ON
            -DDYNAMPI_BUILD_BENCHMARKS=ON
            -DCMAKE_CXX_FLAGS="-stdlib=libc++"
            -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++"
            -DCMAKE_MODULE_LINKER_FLAGS="-stdlib=libc++"
          )

          echo "Using Clang ${CC} with MPI: $MPI_TYPE"
          cmake -B build -S . "${CMAKE_ARGS[@]}"
      - name: Build
        run: |
          [[ "${{ matrix.clang-version }}" -eq 18 ]] && source /opt/intel/oneapi/setvars.sh
          cmake --build build --config ${{ matrix.build-type }} --parallel
      - name: Run Tests
        run: |
          [[ "${{ matrix.clang-version }}" -eq 18 ]] && source /opt/intel/oneapi/setvars.sh
          cd build
          echo "Running tests with $MPI_TYPE"
          ctest --output-on-failure --parallel -C ${{ matrix.build-type }}
